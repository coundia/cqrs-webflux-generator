package {{package}};
{{#imports}}
	import {{.}};
{{/imports}}

import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.http.codec.ServerSentEvent;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.FluxSink;

@RestController
@RequestMapping("/api/v1/queries/{{nameLowerCase}}")
@Tag(name = "{{name}} queries SSE", description = "SSE endpoint for streaming {{nameLowerCase}} updates")
@Slf4j
public class {{name}}SseController {

private final {{name}}Repository repository;
private final {{name}}Publisher publisher;

public {{name}}SseController({{name}}Repository repository, {{name}}Publisher publisher) {
this.repository = repository;
this.publisher = publisher;
}

@GetMapping(value = "/stream", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
public Flux<ServerSentEvent<{{name}}Response>> stream() {
	Flux<ServerSentEvent<{{name}}Response>> existing = repository.findAll()
		.map({{name}}Mapper::toResponse)
		.map(data -> ServerSentEvent.<{{name}}Response>builder()
			.event("{{nameLowerCase}}-init")
			.data(data)
			.build());

			Flux<ServerSentEvent<{{name}}Response>> updates = publisher.stream();

		return existing.concatWith(updates);
	}
}