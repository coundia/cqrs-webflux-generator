package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;
import com.pcoundia.shared.application.ApiResponseDto;
import java.util.Optional;
import java.util.List;

@RestController
@RequestMapping("/api/v1/queries/{{nameLowerCase}}")
@Tag(name = "{{name}} Query", description = "Endpoints for querying {{nameLowerCase}}s by {{field.name}}")
@Slf4j
public class {{className}} {

private final FindBy{{field.nameCapitalized}}{{name}}Handler handler;

public {{className}}(FindBy{{field.nameCapitalized}}{{name}}Handler handler) {
this.handler = handler;
}

@GetMapping("/by-{{field.name}}")
@Operation(
summary = "Find {{nameLowerCase}} by {{field.name}}",
description = "Returns a list of {{nameLowerCase}}s that match the given {{field.name}}"
)
@ApiResponses(value = {
@ApiResponse(responseCode = "200", description = "Matching {{nameLowerCase}}s",
content = @Content(mediaType = "application/json",
schema = @Schema(implementation = ApiResponseDto.class))),
@ApiResponse(responseCode = "400", description = "Invalid parameter", content = @Content),
@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content)
})
{{#isId}}public Mono<ApiResponseDto> findBy{{field.nameCapitalized}}({{/isId}}
{{^isId}}public Mono<ApiResponseDto> findBy{{field.nameCapitalized}}({{/isId}}
	@Parameter(description = "Value of the {{field.name}} to filter by", required = true)
	@RequestParam String {{field.name}}) {

{{name}}{{field.nameCapitalized}} {{field.name}}Vo = {{name}}{{field.nameCapitalized}}.create({{field.name}});
	FindBy{{field.nameCapitalized}}{{name}}Query query = new FindBy{{field.nameCapitalized}}{{name}}Query({{field.name}}Vo);

	return Mono.fromFuture(handler.handle(query))
{{#isId}}.map(list -> list.stream().findFirst().map(ApiResponseDto::ok).orElse(ApiResponseDto.error("Not found"))){{/isId}}
{{^isId}}.map(ApiResponseDto::ok){{/isId}}
	.onErrorResume(ex -> {
	log.error("Error retrieving {{nameLowerCase}} by {{field.name}}: {}", ex.getMessage(), ex);
	return Mono.just(ApiResponseDto.error("Internal server error"));
	});
	}
}
